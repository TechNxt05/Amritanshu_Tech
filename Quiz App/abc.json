{
    "question": [
      "Q1. Who invented OOP?",
      "Q2. Which is not a feature of OOP in general definitions?",
      "Q3. Which was the first purely object oriented programming language developed?",
      "Q4. When OOP concept did first came into picture?",
      "Q5. Which feature of OOP indicates code reusability?",
      "Q6. Which header file is required in C++ to use OOP?",
      "Q7. Why Java is Partially OOP language?",
      "Q8. Which among the following doesn't come under OOP concept?",
      "Q9.  Which is the correct syntax of inheritance?",
      "Q10. The feature by which one object can interact with another object is",
      "Q11. Which among the following, for a pure OOP language, is true?",
      "Q12. How many types of access specifiers are provided in OOP (C++)?",
      "Q13. In multilevel inheritance, which is the most significant feature of OOP used?",
      "Q14. What is encapsulation in OOP?",
      "Q15. Which of the following is not true about polymorphism?",
      "Q16. What is an abstraction in object-oriented programming?",
      "Q17. Which among the following can show polymorphism?",
      "Q18. In which access should a constructor be defined, so that object of the class can be created in any function?",
      "Q19. The copy constructors can be used to _______",
      "Q20. Which among the following represents correct constructor?",
      "Q21. What happens when an object is passed by reference?",
      "Q22. Which access specifier is usually used for data members of a class?",
      "Q23. How to access data members of a class?",
      "Q24. Which feature of OOP reduces the use of nested classes?",
      "Q25. Which keyword among the following can be used to declare an array of objects in java?",
      "Q26. Which operator can be used to free the memory allocated for an object in C++?",
      "Q27. Which of the following is not a property of an object?",
      "Q28. Which type of members can't be accessed in derived classes of a base class?",
      "Q29. Which among the following best describes the Inheritance?",
      "Q30. Single level inheritance supports _____________ inheritance."
    ],
    "answer": [
      3,
      4,
      2,
      3,
      4,
      1,
      2,
      3,
      2,
      2,
      3,
      2,
      4,
      1,
      2,
      1,
      2,
      3,
      3,
      2,
      3,
      2,
      4,
      1,
      3,
      4,
      2,
      3,
      1,
      4
    ],
    "options": [
  
      ["Andrea Ferro",
       "Adele Goldberg",
       "Alan Kay",
       "Dennis Ritchie"
      ],
      ["Efficient Code",
       "Code reusability",
       "Modularity",
       "Duplicate/Redundant data"
      ],
      ["Kotlin",
       "SmallTalk",
       "Java",
       "C++"
      ],
      ["1980's",
       "1995",
       "1970's",
       "1993"
      ],
      ["Abstraction",
        "Polymorphism",
        "Encapsulation",
        "Inheritance"
      ],
      ["OOP can be used without using any header file",
       "stdlib.h",
       "iostream.h",
       "stdio.h"
      ],
      ["It allows code to be written outside classes",
       "It supports usual declaration of primitive data types",
       "It does not support pointers",
       "It doesnâ€™t support all types of inheritance"
      ],
      ["Data hiding",
       "Message passing",
       "Platform independent",
       "Data binding"
      ],
      ["class base_classname :access derived_classname{ /*define class body*/ };",
       "class derived_classname : access base_classname{ /*define class body*/ };",
       "class derived_classname : base_classname{ /*define class body*/ };",
       "class base_classname : derived_classname{ /*define class body*/ };"
      ],
      ["Message reading",
       "Message Passing",
       "Data transfer",
       "Data Binding"
      ],
      ["The language should follow at least 1 feature of OOP",
       "The language must follow only 3 features of OOP",
       "The language must follow all the rules of OOP",
       "The language should follow 3 or more features of OOP"
      ],
      ["4",
       "3",
       "2",
       "1"
      ],
      ["Code efficiency",
       "Code readability",
       "Flexibility",
       "Code reusability"
      ],
      ["It is a way of combining various data members and member functions that operate on those data members into a single unit",
       "It is a way of combining various data members and member functions into a single unit which can operate on any data",
       "It is a way of combining various data members into a single unit",
       "It is a way of combining various member functions into a single unit"
      ],
      ["Helps in redefining the same functionality",
       "Increases overhead of function definition always",
       "It is feature of OOP",
       "Ease in readability of program"
      ],
      ["Hiding the implementation and showing only the features",
       "Hiding the important data",
       "Hiding the implementation",
       "Showing the important data"
      ],
      ["Overloading &&",
       "Overloading <<",
       "Overloading ||",
       "Overloading +="
      ],
      ["Any access specifier will work",
       "Private",
       "Public",
       "Protected"
      ],
      ["Copy an object so that it can be passed to another primitive type variable",
       "Copy an object for type casting",
       "Copy an object so that it can be passed to a function",
       "Copy an object so that it can be passed to a class"
      ],
      ["-classname()",
       "classname()",
       "()classname",
       "~classname()"
      ],
      ["Destructor is called at end of function",
       "Destructor is called when called explicitly",
       "Destructor is not called",
       "Destructor is called when function is out of scope"
      ],
      ["Protected",
       "Private",
       "Public",
       "Default"
      ],
      ["Dot, arrow or direct call",
       "Dot operator",
       "Arrow operator",
       "Dot or arrow as required"
      ],
      ["Inheritance",
       "Binding",
       "Abstraction",
       "Encapsulation"
      ],
      ["allocate",
       "arr",
       "new",
       "create"
      ],
      ["Unallocate",
       "Free()",
       "Collect",
       "delete"
      ],
      ["Properties",
       "Names",
       "Identity",
       "Attributes"
      ],
      [
        "All can be accessed",
        "Protected",
        "Private",
        "Public"
      ],
      ["Using the data and functions into derived segment",
       "Using already defined functions in a programming language",
       "Using the code already written once",
       "Copying the code already written"
      ],
      ["Language independency",
       "Multiple inheritance",
       "Compile time",
       "Runtime"
      ]
      
    ]
  }